---
title: "Contributors"
execute:
  echo: false
format: 
  html:
    fig-width: 8
    fig-height: 4
    code-fold: false
---

```{r load-pkg, echo = FALSE, message = FALSE}
library (repometrics)
requireNamespace ("dplyr", quietly = TRUE)
requireNamespace ("tidyr", quietly = TRUE)
```
## Git log

```{r load-data}
dat <- readRDS ("results.Rds")
```
```{r ctbs-git-data}
ctbs <- dat$cm$contributors
log <- dat$cm$gitlog
log <- log [which (!log$aut_name == "GitHub"), ]

dayOne <- min (as.Date (log$timestamp))

# Insert gh handles in git log:
log$gh_handle <- NA_character_

# Match by log$aut_name:
index <- match (log$aut_name, ctbs$name)
log$gh_handle <- ctbs$gh_handle [index]
# Match by log$aut_email:
index <- which (is.na (log$gh_handle))
index_email <- match (log$aut_email [index], ctbs$email)
log$gh_handle [index] <- ctbs$gh_handle [index_email]

is_test_env <- Sys.getenv ("REPOMETRICS_TESTS") == "true"
if (is_test_env) {
    log$gh_handle <- "mpadge"
}


log <- dplyr::mutate (log, date = as.Date (timestamp)) |>
    dplyr::mutate (date = as.Date (gsub ("\\-[0-9]{2}$", "-01", date))) |>
    dplyr::group_by (gh_handle, date) |>
    dplyr::summarise (
        nfiles_changed = sum (nfiles_changed),
        lines_added = sum (lines_added) - sum (whitespace_added),
        lines_removed = sum (lines_removed) - sum (whitespace_removed),
        ncommits = dplyr::n (),
        .groups = "keep"
    ) |>
    dplyr::ungroup () |>
    dplyr::filter (!is.na (gh_handle))

dates <- seq (min (log$date), max (log$date), by = "months")

log_reg <- dplyr::group_by (log, gh_handle) |>
    tidyr::complete (date = dates) |>
    tidyr::fill () |>
    dplyr::arrange (by = date) |>
    dplyr::ungroup () |>
    tidyr::replace_na (list (
        nfiles_changed = 0L,
        lines_added = 0L,
        lines_removed = 0L,
        ncommits = 0L
    )) |>
    dplyr::group_by (gh_handle) |>
    dplyr::mutate (
        nfiles_changed_cum = cumsum (nfiles_changed),
        lines_added_cum = cumsum (lines_added),
        lines_removed_cum = cumsum (lines_removed),
        ncommits_cum = cumsum (ncommits),
        date = as.Date (date)
    ) |>
    dplyr::ungroup ()

log_reg <- tidyr::pivot_longer (
    log_reg,
    c (
        "nfiles_changed", "lines_added", "lines_removed", "ncommits",
        "nfiles_changed_cum", "lines_added_cum", "lines_removed_cum",
        "ncommits_cum"
    )
)
```

This graph shows several metrics for contributions to the git log of the
repository. Lines show cumulative values since the initial commit on
`r dayOne` for four variables, and a selected number of top contributors.


```{r ojs-in-log, echo = FALSE}
ojs_define (log_in = log_reg)
```
```{ojs log-transpose-and-filter}
log = {
    return transpose(log_in).map(row => ({
        ...row,
        date: new Date(row.date)
    }));
}
viewof varNameGitLog = Inputs.radio(
    new Map([
        ["Nr. files changed", "nfiles_changed"],
        ["Lines added", "lines_added"],
        ["Lines removed", "lines_removed"],
        ["Nr. commits", "ncommits"],
    ]),
    {
        label: "Variable:",
        value: "ncommits"
    }
)
```

```{ojs cumulative-checkbox-gitlog}
viewof cumulativeGitLog = Inputs.radio(["true", "false"],
    {
        value: "true",
        label: "Cumulative Values:"
    }
)
```

```{ojs log-scale-checkbox-gitlog}
viewof logScaleGitLog = Inputs.radio(["true", "false"],
    {
        value: "true",
        label: "Log Scale:"
    }
)
logTypeGitLog = logScaleGitLog === "true" ? "log" : "linear";
```

```{ojs transform-gitlog-data}
varNameGitLogActual = cumulativeGitLog === "true" ? varNameGitLog + "_cum" : varNameGitLog;
logFiltered = log.filter(function(row) {
    return row.name === varNameGitLogActual;
})

function replaceZeroWithOneLog(data) {
    return data.map(row => {
        const newRow = { ...row };
        if (logTypeGitLog === "log") {
            Object.values(newRow).forEach(value => {
                if (typeof value === "number" && value === 0) {
                    newRow.value = 1;
                }
            });
        }
        return newRow;
    });
}
logFiltered01 = replaceZeroWithOneLog(logFiltered);
```


```{ojs count-contributors}
function getMaxValues(log, varNameGitLog) {
    const ctbs = log.map((item) => item.gh_handle);
    const uniqueCtbs = [... new Set(ctbs)];

    const maxValues = {};
    uniqueCtbs.forEach(handle => {
        const logHandle = log.filter(item => item.gh_handle === handle);
        if (logHandle.some(item => item.name === varNameGitLog)) {
            maxValues[handle] = Math.max(...logHandle
                .filter(item => item.name === varNameGitLog)
                .map(item => item.value));
        } else {
            console.warn(`No entry found with name ${varNameGitLog} for handle: ${handle}`);
        }
    })

    const sortedMaxValues = Object.fromEntries(
        Object.entries(maxValues).sort((a, b) => b[1] - a[1])
    );

    return sortedMaxValues;
}
maxValues = getMaxValues(log, varNameGitLog);
numUniqueCtbs = Object.keys(maxValues).length;
```

```{ojs num-contribs-selector}
viewof numContribsGitLog = Inputs.range(
    [1, numUniqueCtbs],
    {
        step: 1,
        label: "Num. of Top Contributors",
        value: 5
    }
)
function reduceLogToCtbs(log, maxValues, numContribsGitLog) {
    const topCtbs = Object.keys(maxValues).slice(0, numContribsGitLog);
    const logReduced = log.filter(row => topCtbs.includes(row.gh_handle));
    return logReduced;
}
logReduced = reduceLogToCtbs(logFiltered, maxValues, numContribsGitLog);
logReduced01 = reduceLogToCtbs(logFiltered01, maxValues, numContribsGitLog);
console.log("------log" + JSON.stringify(logReduced));
console.log("------log01" + JSON.stringify(logReduced01));
```


```{ojs log-plot}
Plot.plot({
    style: `
        overflow: visible;
    `,
    marginLeft: 90,
    marginBottom: 50,
    x: { grid: true },
    y: { grid: true, type: logTypeGitLog },
    marks: [
        Plot.ruleY([0]),
        Plot.lineY(
            logReduced01,
            {
                x: "date",
                y: "value",
                stroke: "gh_handle",
                fontSize: 18,
                curve: "basis-open"
            },
        ),
        Plot.text(
            logReduced01,
            Plot.selectLast({
                x: "date",
                y: "value",
                z: "gh_handle",
                text: "gh_handle",
                textAnchor: "start",
                dx: 3,
                fontSize: 18
            })
        ),
        Plot.axisX(
            {
                fontSize: 14,
                label: "",
                labelArrow: false
            }
        ),
        Plot.axisX(
            {
                fontSize: 20,
                label: "Date",
                labelAnchor: "center",
                labelOffset: 40,
                ticks: []
            }
        ),
        Plot.axisY(
            {
                fontSize: 14,
                label: "",
                labelArrow: false
            }
        ),
        Plot.axisY(
            {
                fontSize: 24,
                label: "Value",
                labelAnchor: "center",
                labelOffset: 85,
                ticks: []
            }
        ),
    ]
})
```

## GitHub Issues and Pull Requests

```{r issue-data-preprocess}
issues_by_date <- dat$cm$issues_from_gh_api |>
    dplyr::mutate (date = as.Date (created_at)) |>
    dplyr::mutate (date = as.Date (gsub ("\\-[0-9]{2}$", "-01", date))) |>
    dplyr::group_by (date) |>
    dplyr::summarise (issues = dplyr::n ()) |>
    dplyr::ungroup ()
issue_cmts <- dat$cm$issue_comments_from_gh_api |>
    dplyr::mutate (date = as.Date (created_at)) |>
    dplyr::mutate (date = as.Date (gsub ("\\-[0-9]{2}$", "-01", date))) |>
    dplyr::group_by (date) |>
    dplyr::summarise (comments = dplyr::n ()) |>
    dplyr::ungroup ()
prs <- dat$cm$prs_from_gh_api |>
    dplyr::mutate (date = as.Date (created_at)) |>
    dplyr::mutate (date = as.Date (gsub ("\\-[0-9]{2}$", "-01", date))) |>
    dplyr::group_by (date) |>
    dplyr::summarise (prs = dplyr::n ()) |>
    dplyr::ungroup ()

issue_data <- dplyr::left_join (issues_by_date, issue_cmts, by = "date") |>
    dplyr::left_join (prs, by = "date")

# Then fill missing dates, replace NA with 0, convert to cumsum, and pivot
dates <- seq (min (issue_data$date), max (issue_data$date), by = "months")
issue_data <- tidyr::complete (issue_data, date = dates) |>
    tidyr::fill () |>
    dplyr::arrange (by = date) |>
    tidyr::replace_na (list (
        issues = 0L,
        comments = 0L,
        prs = 0L
    )) |>
    dplyr::mutate (
        issues_cum = cumsum (issues),
        comments_cum = cumsum (comments),
        prs_cum = cumsum (prs)
    ) |>
    tidyr::pivot_longer (
        c ("issues", "comments", "prs", "issues_cum", "comments_cum", "prs_cum")
    )
```

```{r ojs-in-issue-data, echo = FALSE}
ojs_define (issue_data_in = issue_data)
```
```{ojs issue-data-transpose-and-filter}
issueData = {
    return transpose(issue_data_in).map(row => ({
        ...row,
        date: new Date(row.date)
    }));
}
viewof varNameIssues = Inputs.radio(
    new Map([
        ["Nr. issues", "issues"],
        ["Nr. PRs", "prs"],
        ["Nr. issue comments", "comments"],
    ]),
    {
        label: "Variable:",
        value: "issues"
    }
)
```

```{ojs cumulative-checkbox-issues}
viewof cumulativeIssues = Inputs.radio(["true", "false"],
    {
        value: "true",
        label: "Cumulative Values:"
    }
)
```


```{ojs log-scale-checkbox-issues}
viewof logScaleIssues = Inputs.radio(["true", "false"],
    {
        value: "false",
        label: "Log Scale:"
    }
)
logTypeIssues = logScaleIssues === "true" ? "log" : "linear";

function replaceZeroWithOneIssues(data) {
    return data.map(row => {
        const newRow = { ...row };
        if (logTypeIssues === "log") {
            Object.values(newRow).forEach(value => {
                if (typeof value === "number" && value === 0) {
                    newRow.value = 1;
                }
            });
        }
        return newRow;
    });
}
```

```{ojs filter-issue-data}
varNameIssuesActual = cumulativeIssues === "true" ? varNameIssues + "_cum" : varNameIssues;
issueDataFiltered = issueData.filter(function(row) {
    return row.name === varNameIssuesActual;
})
issueDataFiltered01 = replaceZeroWithOneIssues(issueDataFiltered);
```


```{ojs issues-plot}
Plot.plot({
    style: `
        overflow: visible;
    `,
    marginLeft: 90,
    marginBottom: 50,
    x: { grid: true },
    y: { grid: true, type: logTypeIssues },
    marks: [
        Plot.ruleY([0]),
        Plot.lineY(
            issueDataFiltered01,
            {
                x: "date",
                y: "value",
                fontSize: 18,
                curve: "basis-open"
            },
        ),
        Plot.axisX(
            {
                fontSize: 14,
                label: "",
                labelArrow: false
            }
        ),
        Plot.axisX(
            {
                fontSize: 20,
                label: "Date",
                labelAnchor: "center",
                labelOffset: 40,
                ticks: []
            }
        ),
        Plot.axisY(
            {
                fontSize: 14,
                label: "",
                labelArrow: false
            }
        ),
    ]
})
```
