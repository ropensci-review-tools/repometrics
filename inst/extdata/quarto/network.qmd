---
title: "Network"
execute:
  echo: false
format: 
  html:
    fig-width: 8
    fig-height: 4
    code-fold: false
---

This page shows an interactive network diagram of the main developers of 
the `epicontacts` repository, including all other repositories they have contributed to.
Links are shown between developers and repositories, as well as between
developers themselves. Thickness of lines connecting developers are scaled
according to relative efforts in joint repositories.

The "person" nodes show main developers of the `epicontacts` repository, which is shown
in the centre of the graph as "this_repo". The lines connecting "this_repo"
with developers are scaled according to proportional contributions to other
repositories on which they have worked (over the default time-span of the
previous year), with circles for those repositories scaled by total numbers of
commits made by the core developer team of the `epicontacts` repository.

The nodes are all hyperlinked so that clicking on any one of them will open the
corresponding GitHub page in a new tab. The "Force Strength" slider can be used
to modify the strength of the forces connecting the nodes of the graph. More
negative values reduce the strength, and expand the graph.

```{ojs import-network-data}
network = FileAttachment("results-user-network.json").json()

node_orgs = Array.from(new Set(network.nodes.map(d => d.org).filter(org => org.length > 0)));
link_orgs = Array.from(new Set(network.links.map(d => d.org).filter(org => org.length > 0)));
```

```{ojs org-selector}
viewof orgSelection = {
    const input =  Inputs.checkbox(
        node_orgs,
        {
            value: node_orgs,
            label: htl.html`<b>GitHub org:</b>`,
        }
    );

    // Modification ideas from
    // https://talk.observablehq.com/t/what-is-the-best-way-to-style-an-input-checkbox/7690/2
    const scope = DOM.uid().id;
    input.classList.add(scope);

    input.append(htl.html`<style>
    .${scope} > div, .${scope} > div label { display: flex; flex-wrap: wrap; gap: 10px; width: 300px }
    `)

    return input;
}
```


```{ojs strength-slider}
viewof strength = Inputs.range([-2000,0], {value: -400, step: 100, label: "Force Strength"});
```

```{ojs swatches}
import {Swatches} from "@d3/color-legend"
Swatches(chart.scales.color)
```

```{ojs ForceGraph-plot}
chart = {

  const width = 928;
  const height = 600;

  // const nodes = network.nodes;
  // const links = network.links;
  const nodes = network.nodes.filter(function(node) {
    return orgSelection.includes(node.org) || node.org.length === 0
  })
  const links = network.links.filter(function(link) {
    return orgSelection.includes(link.org) || link.org.length === 0
  })
  const types = Array.from(new Set(links.map(d => d.type)));

  const color = d3.scaleOrdinal(types, d3.schemeCategory10);

  const simulation = d3.forceSimulation(nodes)
      .force("link", d3.forceLink(links).id(d => d.id))
      .force("charge", d3.forceManyBody().strength(strength))
      .force("x", d3.forceX())
      .force("y", d3.forceY());

  const svg = d3.create("svg")
      .attr("viewBox", [-width / 2, -height / 2, width, height])
      .attr("width", width)
      .attr("height", height)
      .attr("style", "max-width: 100%; height: auto; font: 14px sans-serif;");

  // Per-type markers, as they don't inherit styles.
  svg.append("defs").selectAll("marker")
    .data(types)
    .join("marker")
      .attr("id", d => `arrow-${d}`)
      .attr("viewBox", "0 -5 10 10")
      .attr("refX", 15)
      .attr("refY", -0.5)
      .attr("markerWidth", 6)
      .attr("markerHeight", 6)
      .attr("orient", "auto")
    .append("path")
      .attr("fill", color)
      .attr("d", "M0,-5L10,0L0,5");

  const link = svg.append("g")
      .attr("fill", "none")
      .attr("stroke-width", 1.5)
    .selectAll("path")
    .data(links)
    .join("path")
      .attr("stroke", d => color(d.type))
      .attr("stroke-width", d => Math.sqrt(d.value));

  const node = svg.append("g")
    .selectAll("g")
    .data(nodes)
    .join("g")
      .call(drag(simulation));

  node.append("circle")
      .attr("stroke", "white")
      .attr("stroke-width", 1.5)
      .data(nodes)
      .join("circle")
        .attr("fill", d => color(d.group))
        .attr("r", d => 10 * Math.log10(d.contributions + 1));

  node.append("text")
      .attr("x", 8)
      .attr("y", "0.31em")
      .text(d => d.id)
      .html(d => `<a href="https://github.com/${d.id}" style="text-decoration:none" target="_blank">${d.id}</a>`)
    .clone(true).lower()
      .attr("fill", "none")
      .attr("stroke", "white")
      .attr("stroke-width", 3);

  simulation.on("tick", () => {
    link.attr("d", linkArc);
    node.attr("transform", d => `translate(${d.x},${d.y})`);
  });

  invalidation.then(() => simulation.stop());

  return Object.assign(svg.node(), {scales: {color}});
}
```

```{ojs}
function linkArc(d) {
  const r = Math.hypot(d.target.x - d.source.x, d.target.y - d.source.y);
  return `
    M${d.source.x},${d.source.y}
    A${r},${r} 0 0,1 ${d.target.x},${d.target.y}
  `;
}
```

```{ojs}
drag = simulation => {

  function dragstarted(event, d) {
    if (!event.active) simulation.alphaTarget(0.3).restart();
    d.fx = d.x;
    d.fy = d.y;
  }

  function dragged(event, d) {
    d.fx = event.x;
    d.fy = event.y;
  }

  function dragended(event, d) {
    if (!event.active) simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
  }

  return d3.drag()
      .on("start", dragstarted)
      .on("drag", dragged)
      .on("end", dragended);
}
```
