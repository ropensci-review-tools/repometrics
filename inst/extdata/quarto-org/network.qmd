---
title: "Network"
execute:
  echo: false
format:
  html:
    fig-width: 8
    fig-height: 4
    code-fold: false
---

This page shows an interactive network diagram of "epiverse" packages.

```{r}
fn_calls <- readRDS ("fn-calls.Rds")
fn_call_nodes_pkg <- fn_calls |>
    dplyr::group_by (package) |>
    dplyr::summarise (num_calls = sum (num_calls)) |>
    dplyr::rename (id = package)
fn_call_nodes_src <- fn_calls |>
    dplyr::group_by (source) |>
    dplyr::summarise (num_calls = sum (num_calls)) |>
    dplyr::rename (id = source)
fn_call_nodes <- dplyr::left_join (
    fn_call_nodes_src,
    fn_call_nodes_pkg,
    by = dplyr::join_by (id, num_calls)
)
fn_call_nodes$group <- "package"
all_pkgs <- unique (c (fn_calls$source, fn_calls$package))
extra_pkgs <- all_pkgs [which (!all_pkgs %in% fn_call_nodes$id)]
fn_call_nodes <- rbind (
    fn_call_nodes,
    data.frame (id = extra_pkgs, num_calls = 0L, group = "isolated")
)
fn_calls <- fn_calls |>
    dplyr::select (-num_fns) |>
    dplyr::rename (target = package, value = num_calls)
fn_calls$type <- "package"
```

```{r ojs-definitions}
ojs_define (nodes_in = fn_call_nodes)
ojs_define (links_in = fn_calls)
```

```{ojs transform}
nodes = {
    return transpose(nodes_in).map(row => ({
        ...row,
    }));
}
links = {
    return transpose(links_in).map(row => ({
        ...row,
    }));
}
```


<div style="margin-top: 20px; margin-bottom: 20px;"></div>

```{ojs strength-slider}
viewof strength = Inputs.range(
    [-2000,0],
    {value: -400, step: 100, label: htl.html`<b>Force Strength:</b>`}
);
```

```{ojs line-width-slider}
viewof linewidth = Inputs.range(
    [1,10],
    {value: 1, step: 1, label: htl.html`<b>Line Thickness:</b>`}
);
```

<div style="margin-top: 20px; margin-bottom: 20px;"></div>

```{ojs swatches}
import {Swatches} from "@d3/color-legend"
Swatches(chart.scales.color)
```

```{ojs ForceGraph-plot}
chart = {

  const width = 928;
  const height = 600;

  const types = Array.from(new Set(links.map(d => d.type)));

  const color = d3.scaleOrdinal(types, d3.schemeCategory10);

  const simulation = d3.forceSimulation(nodes)
      .force("link", d3.forceLink(links).id(d => d.id))
      .force("charge", d3.forceManyBody().strength(strength))
      .force("x", d3.forceX())
      .force("y", d3.forceY());

  const svg = d3.create("svg")
      .attr("viewBox", [-width / 2, -height / 2, width, height])
      .attr("width", width)
      .attr("height", height)
      .attr("style", "max-width: 100%; height: auto; font: 14px sans-serif;");

  // Per-type markers, as they don't inherit styles.
  svg.append("defs").selectAll("marker")
    .data(types)
    .join("marker")
      .attr("id", d => `arrow-${d}`)
      .attr("viewBox", "0 -5 10 10")
      .attr("refX", 15)
      .attr("refY", -0.5)
      .attr("markerWidth", 6)
      .attr("markerHeight", 6)
      .attr("orient", "auto")
    .append("path")
      .attr("fill", color)
      .attr("d", "M0,-5L10,0L0,5");

  const link = svg.append("g")
      .attr("fill", "none")
      .attr("stroke-width", 1.5)
    .selectAll("path")
    .data(links)
    .join("path")
      .attr("stroke", d => color(d.type))
      .attr("stroke-width", d => Math.sqrt(d.value) * linewidth);

  const node = svg.append("g")
    .selectAll("g")
    .data(nodes)
    .join("g")
      .call(drag(simulation));

  node.append("circle")
      .attr("stroke", "white")
      .attr("stroke-width", 1.5)
      .data(nodes)
      .join("circle")
        .attr("fill", d => color(d.group))
        .attr("r", d => 10 * Math.log10(d.contributions + 1));

  node.append("text")
      .attr("x", 8)
      .attr("y", "0.31em")
      .text(d => d.id)
      .html(d => `<a href="https://github.com/${d.id}" style="text-decoration:none" target="_blank">${d.id}</a>`)
    .clone(true).lower()
      .attr("fill", "none")
      .attr("stroke", "white")
      .attr("stroke-width", 3);

  simulation.on("tick", () => {
    link.attr("d", linkArc);
    node.attr("transform", d => `translate(${d.x},${d.y})`);
  });

  invalidation.then(() => simulation.stop());

  return Object.assign(svg.node(), {scales: {color}});
}
```

```{ojs}
function linkArc(d) {
  const r = Math.hypot(d.target.x - d.source.x, d.target.y - d.source.y);
  return `
    M${d.source.x},${d.source.y}
    A${r},${r} 0 0,1 ${d.target.x},${d.target.y}
  `;
}
```

```{ojs}
drag = simulation => {

  function dragstarted(event, d) {
    if (!event.active) simulation.alphaTarget(0.3).restart();
    d.fx = d.x;
    d.fy = d.y;
  }

  function dragged(event, d) {
    d.fx = event.x;
    d.fy = event.y;
  }

  function dragended(event, d) {
    if (!event.active) simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
  }

  return d3.drag()
      .on("start", dragstarted)
      .on("drag", dragged)
      .on("end", dragended);
}
```
